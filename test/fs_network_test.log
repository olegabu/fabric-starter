[1;36mCreating @abab12 channel in org1.example.com using API...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mCreating @abab12 channel in org1.example.com using API...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mCreating @abab12 channel in org1.example.com using API...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mCreating @abab12 channel in org1.example.com using API...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mCreating @abab12 channel in org1.example.com using API...[m[m[m
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyNCIsImlhdCI6MTU4MDQ4NTAxN30.RNF4Pcq6J6ubid1e9TbJ4A3GR9tWxSj0QI4P0LkRjwc
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mCreating the <test1234567890> channel for org1.example.com...[m[m[m
[1;32mExecute: docker-compose -f docker-compose.yaml    run --no-deps --rm cli.peer bash -c container-scripts/network/channel-create.sh test1234567890[m[m[m
Creating volume "fabric-starter_peer0" with default driver
Creating volume "fabric-starter_webapps" with default driver
Creating volume "fabric-starter_routes" with default driver
example.com

Create channel org1 test1234567890
--2020-02-03 08:25:07--  http://www.example.com/msp/admincerts/Admin@example.com-cert.pem
Resolving www.example.com (www.example.com)... 172.19.0.4
Connecting to www.example.com (www.example.com)|172.19.0.4|:80... connected.
HTTP request sent, awaiting response... 304 Not Modified
File â€˜crypto-config/ordererOrganizations/example.com/msp/admincerts/Admin@example.com-cert.pemâ€™ not modified on server. Omitting download.

--2020-02-03 08:25:07--  http://www.example.com/msp/cacerts/ca.example.com-cert.pem
Resolving www.example.com (www.example.com)... 172.19.0.4
Connecting to www.example.com (www.example.com)|172.19.0.4|:80... connected.
HTTP request sent, awaiting response... 304 Not Modified
File â€˜crypto-config/ordererOrganizations/example.com/msp/cacerts/ca.example.com-cert.pemâ€™ not modified on server. Omitting download.

--2020-02-03 08:25:07--  http://www.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
Resolving www.example.com (www.example.com)... 172.19.0.4
Connecting to www.example.com (www.example.com)|172.19.0.4|:80... connected.
HTTP request sent, awaiting response... 304 Not Modified
File â€˜crypto-config/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pemâ€™ not modified on server. Omitting download.

--2020-02-03 08:25:07--  http://www.example.com/msp/orderer.example.com/tls/server.crt
Resolving www.example.com (www.example.com)... 172.19.0.4
Connecting to www.example.com (www.example.com)|172.19.0.4|:80... connected.
HTTP request sent, awaiting response... 304 Not Modified
File â€˜crypto-config/ordererOrganizations/example.com/msp/orderer.example.com/tls/server.crtâ€™ not modified on server. Omitting download.

[34m2020-02-03 08:25:07.540 UTC [common.tools.configtxgen] main -> INFO 001[0m Loading configuration
[34m2020-02-03 08:25:07.587 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 002[0m Orderer.OrdererType unset, setting to solo
[34m2020-02-03 08:25:07.587 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003[0m Orderer.Addresses unset, setting to [127.0.0.1:7050]
[34m2020-02-03 08:25:07.587 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 004[0m Orderer.BatchTimeout unset, setting to 2s
[34m2020-02-03 08:25:07.587 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 005[0m Orderer.BatchSize.MaxMessageCount unset, setting to 500
[34m2020-02-03 08:25:07.587 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 006[0m Orderer.BatchSize.AbsoluteMaxBytes unset, setting to 10485760
[34m2020-02-03 08:25:07.588 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 007[0m Orderer.BatchSize.PreferredMaxBytes unset, setting to 2097152
[34m2020-02-03 08:25:07.588 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 008[0m orderer type: solo
[34m2020-02-03 08:25:07.588 UTC [common.tools.configtxgen.localconfig] Load -> INFO 009[0m Loaded configuration: /etc/hyperledger/crypto-config/configtx.yaml
[34m2020-02-03 08:25:07.638 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 00a[0m Orderer.OrdererType unset, setting to solo
[34m2020-02-03 08:25:07.638 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 00b[0m Orderer.Addresses unset, setting to [127.0.0.1:7050]
[34m2020-02-03 08:25:07.638 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 00c[0m orderer type: solo
[34m2020-02-03 08:25:07.638 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 00d[0m Loaded configuration: /etc/hyperledger/crypto-config/configtx.yaml
[34m2020-02-03 08:25:07.638 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 00e[0m Generating new channel configtx
[33m2020-02-03 08:25:07.638 UTC [common.tools.configtxgen.encoder] NewChannelGroup -> WARN 00f[0m Default policy emission is deprecated, please include policy specifications for the channel group in configtx.yaml
[33m2020-02-03 08:25:07.638 UTC [common.tools.configtxgen.encoder] NewOrdererGroup -> WARN 010[0m Default policy emission is deprecated, please include policy specifications for the orderer group in configtx.yaml
[33m2020-02-03 08:25:07.639 UTC [common.tools.configtxgen.encoder] NewOrdererOrgGroup -> WARN 011[0m Default policy emission is deprecated, please include policy specifications for the orderer org group Orderer in configtx.yaml
[33m2020-02-03 08:25:07.639 UTC [common.tools.configtxgen.encoder] NewApplicationOrgGroup -> WARN 012[0m Default policy emission is deprecated, please include policy specifications for the application org group org1 in configtx.yaml
[33m2020-02-03 08:25:07.639 UTC [common.tools.configtxgen.encoder] NewChannelGroup -> WARN 013[0m Default policy emission is deprecated, please include policy specifications for the channel group in configtx.yaml
[33m2020-02-03 08:25:07.639 UTC [common.tools.configtxgen.encoder] NewOrdererGroup -> WARN 014[0m Default policy emission is deprecated, please include policy specifications for the orderer group in configtx.yaml
[33m2020-02-03 08:25:07.640 UTC [common.tools.configtxgen.encoder] NewOrdererOrgGroup -> WARN 015[0m Default policy emission is deprecated, please include policy specifications for the orderer org group Orderer in configtx.yaml
[33m2020-02-03 08:25:07.640 UTC [common.tools.configtxgen.encoder] NewApplicationOrgGroup -> WARN 016[0m Default policy emission is deprecated, please include policy specifications for the application org group org1 in configtx.yaml
[34m2020-02-03 08:25:07.641 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 017[0m Writing new channel tx
[34m2020-02-03 08:25:07.702 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:25:07.741 UTC [cli.common] readBlock -> INFO 002[0m Received block: 0
Execute: channel fetch config crypto-config/configtx/test1234567890.pb -o orderer.example.com:7050 -c test1234567890 --tls --cafile /etc/hyperledger/crypto-config/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem
[34m2020-02-03 08:25:07.870 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:25:07.873 UTC [cli.common] readBlock -> INFO 002[0m Received block: 0
[34m2020-02-03 08:25:07.875 UTC [cli.common] readBlock -> INFO 003[0m Received block: 0
[34m2020-02-03 08:25:07.875 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 0
>> Prepare config update from org1 for channel test1234567890
>> org1 is sending channel update update_in_envelope.pb with  by 
Execute: peer channel update -f update_in_envelope.pb -c test1234567890 -o orderer.example.com:7050 --tls --cafile /etc/hyperledger/crypto-config/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem
[34m2020-02-03 08:25:08.168 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:25:08.178 UTC [channelCmd] update -> INFO 002[0m Successfully submitted channel update
[1;32mOK: Channel <test1234567890> creation run sucsessfuly.[m[m[m
[1;36mCreating the <test1234567890> channel for org1.example.com...[m[m[m
[1;32mExecute: docker-compose -f docker-compose.yaml    run --no-deps --rm cli.peer bash -c container-scripts/network/channel-create.sh test1234567890[m[m[m
example.com

Create channel org1 test1234567890
--2020-02-03 08:25:27--  http://www.example.com/msp/admincerts/Admin@example.com-cert.pem
Resolving www.example.com (www.example.com)... 172.19.0.4
Connecting to www.example.com (www.example.com)|172.19.0.4|:80... connected.
HTTP request sent, awaiting response... 304 Not Modified
File â€˜crypto-config/ordererOrganizations/example.com/msp/admincerts/Admin@example.com-cert.pemâ€™ not modified on server. Omitting download.

--2020-02-03 08:25:27--  http://www.example.com/msp/cacerts/ca.example.com-cert.pem
Resolving www.example.com (www.example.com)... 172.19.0.4
Connecting to www.example.com (www.example.com)|172.19.0.4|:80... connected.
HTTP request sent, awaiting response... 304 Not Modified
File â€˜crypto-config/ordererOrganizations/example.com/msp/cacerts/ca.example.com-cert.pemâ€™ not modified on server. Omitting download.

--2020-02-03 08:25:27--  http://www.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
Resolving www.example.com (www.example.com)... 172.19.0.4
Connecting to www.example.com (www.example.com)|172.19.0.4|:80... connected.
HTTP request sent, awaiting response... 304 Not Modified
File â€˜crypto-config/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pemâ€™ not modified on server. Omitting download.

--2020-02-03 08:25:27--  http://www.example.com/msp/orderer.example.com/tls/server.crt
Resolving www.example.com (www.example.com)... 172.19.0.4
Connecting to www.example.com (www.example.com)|172.19.0.4|:80... connected.
HTTP request sent, awaiting response... 304 Not Modified
File â€˜crypto-config/ordererOrganizations/example.com/msp/orderer.example.com/tls/server.crtâ€™ not modified on server. Omitting download.

[34m2020-02-03 08:25:27.406 UTC [common.tools.configtxgen] main -> INFO 001[0m Loading configuration
[34m2020-02-03 08:25:27.494 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 002[0m Orderer.OrdererType unset, setting to solo
[34m2020-02-03 08:25:27.494 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 003[0m Orderer.Addresses unset, setting to [127.0.0.1:7050]
[34m2020-02-03 08:25:27.494 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 004[0m Orderer.BatchTimeout unset, setting to 2s
[34m2020-02-03 08:25:27.494 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 005[0m Orderer.BatchSize.MaxMessageCount unset, setting to 500
[34m2020-02-03 08:25:27.494 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 006[0m Orderer.BatchSize.AbsoluteMaxBytes unset, setting to 10485760
[34m2020-02-03 08:25:27.494 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 007[0m Orderer.BatchSize.PreferredMaxBytes unset, setting to 2097152
[34m2020-02-03 08:25:27.494 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 008[0m orderer type: solo
[34m2020-02-03 08:25:27.494 UTC [common.tools.configtxgen.localconfig] Load -> INFO 009[0m Loaded configuration: /etc/hyperledger/crypto-config/configtx.yaml
[34m2020-02-03 08:25:27.547 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 00a[0m Orderer.OrdererType unset, setting to solo
[34m2020-02-03 08:25:27.547 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 00b[0m Orderer.Addresses unset, setting to [127.0.0.1:7050]
[34m2020-02-03 08:25:27.547 UTC [common.tools.configtxgen.localconfig] completeInitialization -> INFO 00c[0m orderer type: solo
[34m2020-02-03 08:25:27.547 UTC [common.tools.configtxgen.localconfig] LoadTopLevel -> INFO 00d[0m Loaded configuration: /etc/hyperledger/crypto-config/configtx.yaml
[34m2020-02-03 08:25:27.547 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 00e[0m Generating new channel configtx
[33m2020-02-03 08:25:27.547 UTC [common.tools.configtxgen.encoder] NewChannelGroup -> WARN 00f[0m Default policy emission is deprecated, please include policy specifications for the channel group in configtx.yaml
[33m2020-02-03 08:25:27.548 UTC [common.tools.configtxgen.encoder] NewOrdererGroup -> WARN 010[0m Default policy emission is deprecated, please include policy specifications for the orderer group in configtx.yaml
[33m2020-02-03 08:25:27.548 UTC [common.tools.configtxgen.encoder] NewOrdererOrgGroup -> WARN 011[0m Default policy emission is deprecated, please include policy specifications for the orderer org group Orderer in configtx.yaml
[33m2020-02-03 08:25:27.549 UTC [common.tools.configtxgen.encoder] NewApplicationOrgGroup -> WARN 012[0m Default policy emission is deprecated, please include policy specifications for the application org group org1 in configtx.yaml
[33m2020-02-03 08:25:27.549 UTC [common.tools.configtxgen.encoder] NewChannelGroup -> WARN 013[0m Default policy emission is deprecated, please include policy specifications for the channel group in configtx.yaml
[33m2020-02-03 08:25:27.549 UTC [common.tools.configtxgen.encoder] NewOrdererGroup -> WARN 014[0m Default policy emission is deprecated, please include policy specifications for the orderer group in configtx.yaml
[33m2020-02-03 08:25:27.549 UTC [common.tools.configtxgen.encoder] NewOrdererOrgGroup -> WARN 015[0m Default policy emission is deprecated, please include policy specifications for the orderer org group Orderer in configtx.yaml
[33m2020-02-03 08:25:27.550 UTC [common.tools.configtxgen.encoder] NewApplicationOrgGroup -> WARN 016[0m Default policy emission is deprecated, please include policy specifications for the application org group org1 in configtx.yaml
[34m2020-02-03 08:25:27.550 UTC [common.tools.configtxgen] doOutputChannelCreateTx -> INFO 017[0m Writing new channel tx
[34m2020-02-03 08:25:27.613 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
Error: got unexpected status: BAD_REQUEST -- error applying config update to existing channel 'test1234567890': error authorizing update: error validating ReadSet: proposed update requires that key [Group]  /Channel/Application be at version 0, but it is currently at version 1
Execute: channel fetch config crypto-config/configtx/test1234567890.pb -o orderer.example.com:7050 -c test1234567890 --tls --cafile /etc/hyperledger/crypto-config/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem
[34m2020-02-03 08:25:27.680 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:25:27.683 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 08:25:27.684 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 08:25:27.685 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
>> Prepare config update from org1 for channel test1234567890
configtxlator: error: Error computing update: error computing config update: no differences detected between original and updated config
>> org1 is sending channel update update_in_envelope.pb with  by 
Execute: peer channel update -f update_in_envelope.pb -c test1234567890 -o orderer.example.com:7050 --tls --cafile /etc/hyperledger/crypto-config/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem
[34m2020-02-03 08:25:27.993 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
Error: got unexpected status: BAD_REQUEST -- error applying config update to existing channel 'test1234567890': error authorizing update: error validating ReadSet: proposed update requires that key [Group]  /Channel/Application/org1 be at version 0, but it is currently at version 1
[1;31mError occurred. See console output above.[m[1;33m[m
[1;32mOK: Channel <test1234567890> creation run sucsessfuly.[m[m[m
[34m2020-02-03 08:26:07.009 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:26:07.012 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 08:26:07.013 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 08:26:07.013 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"config": {
"admins": [
"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNHVENDQWNDZ0F3SUJBZ0lSQVBvMW9Gc25ZZ2VubnRvSW8zTUFhWGN3Q2dZSUtvWkl6ajBFQXdJd2N6RUwKTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY1REVk5oYmlCRwpjbUZ1WTJselkyOHhHVEFYQmdOVkJBb1RFRzl5WnpFdVpYaGhiWEJzWlM1amIyMHhIREFhQmdOVkJBTVRFMk5oCkxtOXlaekV1WlhoaGJYQnNaUzVqYjIwd0hoY05NakF3TWpBek1EZ3hNekF3V2hjTk16QXdNVE14TURneE16QXcKV2pCYk1Rc3dDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTgpVMkZ1SUVaeVlXNWphWE5qYnpFZk1CMEdBMVVFQXd3V1FXUnRhVzVBYjNKbk1TNWxlR0Z0Y0d4bExtTnZiVEJaCk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQkpkRFFSSmxUUTE0cVg3c24wdm9vZzgrdVI1dVRiaU8KaHdPTHZvMitjd3IvWC9ESjFTM3ZkVmoyTTN2cTZLbk4reDFMUUJVOGdEYmFEQU1nZ1c1bmlnZWpUVEJMTUE0RwpBMVVkRHdFQi93UUVBd0lIZ0RBTUJnTlZIUk1CQWY4RUFqQUFNQ3NHQTFVZEl3UWtNQ0tBSURHNnd3R1RobjI1CkNXNDMwUnZRcHNHWVFXTHBkSEUwRHJNazNpNVhJWkU5TUFvR0NDcUdTTTQ5QkFNQ0EwY0FNRVFDSUduQXZyTTYKcGd5aTZxd0pkMkFaOW9SM2kzRVUrV05jSlJWYnE1UkhrV2ZiQWlCMGlZeXFMbk96b0dMbEloVXh6MFlkZmNCSwpocjJsVDdxQVJWVGF3cG9Ncmc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
],
"crypto_config": {
"identity_identifier_hash_function": "SHA256",
"signature_hash_family": "SHA2"
},
"fabric_node_ous": null,
"intermediate_certs": [],
"name": "org1",
"organizational_unit_identifiers": [],
"revocation_list": [],
"root_certs": [
"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNVRENDQWZlZ0F3SUJBZ0lRRXVTWC8vU2F4SWduZVdHMlY4WGUxREFLQmdncWhrak9QUVFEQWpCek1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVpNQmNHQTFVRUNoTVFiM0puTVM1bGVHRnRjR3hsTG1OdmJURWNNQm9HQTFVRUF4TVRZMkV1CmIzSm5NUzVsZUdGdGNHeGxMbU52YlRBZUZ3MHlNREF5TURNd09ERXpNREJhRncwek1EQXhNekV3T0RFek1EQmEKTUhNeEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BEWVd4cFptOXlibWxoTVJZd0ZBWURWUVFIRXcxVApZVzRnUm5KaGJtTnBjMk52TVJrd0Z3WURWUVFLRXhCdmNtY3hMbVY0WVcxd2JHVXVZMjl0TVJ3d0dnWURWUVFECkV4TmpZUzV2Y21jeExtVjRZVzF3YkdVdVkyOXRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUUKT2RCc3doWUNRZVpsRGkwRjFpZ0hCUHR5MFg4N2NNc1dXZDVxRC9QS2FMUkVoYUR3SGpsQWY4K0p1YmJ5b2NubQpHMDg4UjEzYVgvME85QS83eUhXbzVhTnRNR3N3RGdZRFZSMFBBUUgvQkFRREFnR21NQjBHQTFVZEpRUVdNQlFHCkNDc0dBUVVGQndNQ0JnZ3JCZ0VGQlFjREFUQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01Da0dBMVVkRGdRaUJDQXgKdXNNQms0Wjl1UWx1TjlFYjBLYkJtRUZpNlhSeE5BNnpKTjR1VnlHUlBUQUtCZ2dxaGtqT1BRUURBZ05IQURCRQpBaUJLNDl1L3JjQ0pxd04zV3dEWlFTRTcreTlBNFhKSGs2bk1HYWRORG1ndEp3SWdmQTdQSk1wUk9ENmlKbmV2ClAzQkVOaXJCS1g4V0g4R0ZvbE16QmhTcjF0MD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
],
"signing_identity": null,
"tls_intermediate_certs": [],
"tls_root_certs": [
"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNWakNDQWYyZ0F3SUJBZ0lRUlBoZFdOU2dOYk1LMXA0T0JBV0VWREFLQmdncWhrak9QUVFEQWpCMk1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVpNQmNHQTFVRUNoTVFiM0puTVM1bGVHRnRjR3hsTG1OdmJURWZNQjBHQTFVRUF4TVdkR3h6ClkyRXViM0puTVM1bGVHRnRjR3hsTG1OdmJUQWVGdzB5TURBeU1ETXdPREV6TURCYUZ3MHpNREF4TXpFd09ERXoKTURCYU1IWXhDekFKQmdOVkJBWVRBbFZUTVJNd0VRWURWUVFJRXdwRFlXeHBabTl5Ym1saE1SWXdGQVlEVlFRSApFdzFUWVc0Z1JuSmhibU5wYzJOdk1Sa3dGd1lEVlFRS0V4QnZjbWN4TG1WNFlXMXdiR1V1WTI5dE1SOHdIUVlEClZRUURFeFowYkhOallTNXZjbWN4TG1WNFlXMXdiR1V1WTI5dE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMEQKQVFjRFFnQUVkUjFlemV5RnFpQ2ZRVEdGRk4yM3ZPR2ZIdklzcDNvOXpIZUw4L2hpUFpkOGU3cklTbUlBYkJ6Vwo0NHZFQUNJMDVNWU8ycktpMmFBNnh5L3I0QzJnaGFOdE1Hc3dEZ1lEVlIwUEFRSC9CQVFEQWdHbU1CMEdBMVVkCkpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUZCUWNEQVRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUNrR0ExVWQKRGdRaUJDQm1ES1hDUTFIekUvd1lieGFKK1ZLdUphbDNOeVErNXdBRUNqQktEaVhWRFRBS0JnZ3Foa2pPUFFRRApBZ05IQURCRUFpQnBzVGRQTkJ4UzZTNTNnYThXTDhmVHp1M25jU0xYREFCS2RDdWdCTUJpSndJZ09lUk5ZVjNqCjJNYm9sNWVPU21FN3E5T3B2a0NLUlNXWEZpMWNDOEhxYks0PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
]
},
"type": 0
}
configtxlator output for channel_id: org1
[1;32m
OK: <org1> is in the channel <test1234567890>.[m[m[m
[34m2020-02-03 08:26:11.680 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:26:11.681 UTC [cli.common] readBlock -> INFO 002[0m Got status: &{NOT_FOUND}
Error: can't read the block: &{NOT_FOUND}
null
configtxlator output for channel_id: null
[1;31m
ERROR: <org1> org is not in the <test12345678901> channel!
See ./fs_network_test.log for logs.[m[m[m
[34m2020-02-03 08:28:24.308 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:28:24.312 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 08:28:24.312 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 08:28:24.312 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"config": {
"admins": [
"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNHVENDQWNDZ0F3SUJBZ0lSQVBvMW9Gc25ZZ2VubnRvSW8zTUFhWGN3Q2dZSUtvWkl6ajBFQXdJd2N6RUwKTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY1REVk5oYmlCRwpjbUZ1WTJselkyOHhHVEFYQmdOVkJBb1RFRzl5WnpFdVpYaGhiWEJzWlM1amIyMHhIREFhQmdOVkJBTVRFMk5oCkxtOXlaekV1WlhoaGJYQnNaUzVqYjIwd0hoY05NakF3TWpBek1EZ3hNekF3V2hjTk16QXdNVE14TURneE16QXcKV2pCYk1Rc3dDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTgpVMkZ1SUVaeVlXNWphWE5qYnpFZk1CMEdBMVVFQXd3V1FXUnRhVzVBYjNKbk1TNWxlR0Z0Y0d4bExtTnZiVEJaCk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQkpkRFFSSmxUUTE0cVg3c24wdm9vZzgrdVI1dVRiaU8KaHdPTHZvMitjd3IvWC9ESjFTM3ZkVmoyTTN2cTZLbk4reDFMUUJVOGdEYmFEQU1nZ1c1bmlnZWpUVEJMTUE0RwpBMVVkRHdFQi93UUVBd0lIZ0RBTUJnTlZIUk1CQWY4RUFqQUFNQ3NHQTFVZEl3UWtNQ0tBSURHNnd3R1RobjI1CkNXNDMwUnZRcHNHWVFXTHBkSEUwRHJNazNpNVhJWkU5TUFvR0NDcUdTTTQ5QkFNQ0EwY0FNRVFDSUduQXZyTTYKcGd5aTZxd0pkMkFaOW9SM2kzRVUrV05jSlJWYnE1UkhrV2ZiQWlCMGlZeXFMbk96b0dMbEloVXh6MFlkZmNCSwpocjJsVDdxQVJWVGF3cG9Ncmc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
],
"crypto_config": {
"identity_identifier_hash_function": "SHA256",
"signature_hash_family": "SHA2"
},
"fabric_node_ous": null,
"intermediate_certs": [],
"name": "org1",
"organizational_unit_identifiers": [],
"revocation_list": [],
"root_certs": [
"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNVRENDQWZlZ0F3SUJBZ0lRRXVTWC8vU2F4SWduZVdHMlY4WGUxREFLQmdncWhrak9QUVFEQWpCek1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVpNQmNHQTFVRUNoTVFiM0puTVM1bGVHRnRjR3hsTG1OdmJURWNNQm9HQTFVRUF4TVRZMkV1CmIzSm5NUzVsZUdGdGNHeGxMbU52YlRBZUZ3MHlNREF5TURNd09ERXpNREJhRncwek1EQXhNekV3T0RFek1EQmEKTUhNeEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BEWVd4cFptOXlibWxoTVJZd0ZBWURWUVFIRXcxVApZVzRnUm5KaGJtTnBjMk52TVJrd0Z3WURWUVFLRXhCdmNtY3hMbVY0WVcxd2JHVXVZMjl0TVJ3d0dnWURWUVFECkV4TmpZUzV2Y21jeExtVjRZVzF3YkdVdVkyOXRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUUKT2RCc3doWUNRZVpsRGkwRjFpZ0hCUHR5MFg4N2NNc1dXZDVxRC9QS2FMUkVoYUR3SGpsQWY4K0p1YmJ5b2NubQpHMDg4UjEzYVgvME85QS83eUhXbzVhTnRNR3N3RGdZRFZSMFBBUUgvQkFRREFnR21NQjBHQTFVZEpRUVdNQlFHCkNDc0dBUVVGQndNQ0JnZ3JCZ0VGQlFjREFUQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01Da0dBMVVkRGdRaUJDQXgKdXNNQms0Wjl1UWx1TjlFYjBLYkJtRUZpNlhSeE5BNnpKTjR1VnlHUlBUQUtCZ2dxaGtqT1BRUURBZ05IQURCRQpBaUJLNDl1L3JjQ0pxd04zV3dEWlFTRTcreTlBNFhKSGs2bk1HYWRORG1ndEp3SWdmQTdQSk1wUk9ENmlKbmV2ClAzQkVOaXJCS1g4V0g4R0ZvbE16QmhTcjF0MD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
],
"signing_identity": null,
"tls_intermediate_certs": [],
"tls_root_certs": [
"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNWakNDQWYyZ0F3SUJBZ0lRUlBoZFdOU2dOYk1LMXA0T0JBV0VWREFLQmdncWhrak9QUVFEQWpCMk1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVpNQmNHQTFVRUNoTVFiM0puTVM1bGVHRnRjR3hsTG1OdmJURWZNQjBHQTFVRUF4TVdkR3h6ClkyRXViM0puTVM1bGVHRnRjR3hsTG1OdmJUQWVGdzB5TURBeU1ETXdPREV6TURCYUZ3MHpNREF4TXpFd09ERXoKTURCYU1IWXhDekFKQmdOVkJBWVRBbFZUTVJNd0VRWURWUVFJRXdwRFlXeHBabTl5Ym1saE1SWXdGQVlEVlFRSApFdzFUWVc0Z1JuSmhibU5wYzJOdk1Sa3dGd1lEVlFRS0V4QnZjbWN4TG1WNFlXMXdiR1V1WTI5dE1SOHdIUVlEClZRUURFeFowYkhOallTNXZjbWN4TG1WNFlXMXdiR1V1WTI5dE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMEQKQVFjRFFnQUVkUjFlemV5RnFpQ2ZRVEdGRk4yM3ZPR2ZIdklzcDNvOXpIZUw4L2hpUFpkOGU3cklTbUlBYkJ6Vwo0NHZFQUNJMDVNWU8ycktpMmFBNnh5L3I0QzJnaGFOdE1Hc3dEZ1lEVlIwUEFRSC9CQVFEQWdHbU1CMEdBMVVkCkpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUZCUWNEQVRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUNrR0ExVWQKRGdRaUJDQm1ES1hDUTFIekUvd1lieGFKK1ZLdUphbDNOeVErNXdBRUNqQktEaVhWRFRBS0JnZ3Foa2pPUFFRRApBZ05IQURCRUFpQnBzVGRQTkJ4UzZTNTNnYThXTDhmVHp1M25jU0xYREFCS2RDdWdCTUJpSndJZ09lUk5ZVjNqCjJNYm9sNWVPU21FN3E5T3B2a0NLUlNXWEZpMWNDOEhxYks0PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
]
},
"type": 0
}
configtxlator output for channel_id: org1
[1;32m
OK: <org1> is in the channel <test1234567890>.[m[m[m
[34m2020-02-03 08:30:05.544 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:30:05.545 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 08:30:05.546 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 08:30:05.546 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"config": {
"admins": [
"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNHVENDQWNDZ0F3SUJBZ0lSQVBvMW9Gc25ZZ2VubnRvSW8zTUFhWGN3Q2dZSUtvWkl6ajBFQXdJd2N6RUwKTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY1REVk5oYmlCRwpjbUZ1WTJselkyOHhHVEFYQmdOVkJBb1RFRzl5WnpFdVpYaGhiWEJzWlM1amIyMHhIREFhQmdOVkJBTVRFMk5oCkxtOXlaekV1WlhoaGJYQnNaUzVqYjIwd0hoY05NakF3TWpBek1EZ3hNekF3V2hjTk16QXdNVE14TURneE16QXcKV2pCYk1Rc3dDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTgpVMkZ1SUVaeVlXNWphWE5qYnpFZk1CMEdBMVVFQXd3V1FXUnRhVzVBYjNKbk1TNWxlR0Z0Y0d4bExtTnZiVEJaCk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQkpkRFFSSmxUUTE0cVg3c24wdm9vZzgrdVI1dVRiaU8KaHdPTHZvMitjd3IvWC9ESjFTM3ZkVmoyTTN2cTZLbk4reDFMUUJVOGdEYmFEQU1nZ1c1bmlnZWpUVEJMTUE0RwpBMVVkRHdFQi93UUVBd0lIZ0RBTUJnTlZIUk1CQWY4RUFqQUFNQ3NHQTFVZEl3UWtNQ0tBSURHNnd3R1RobjI1CkNXNDMwUnZRcHNHWVFXTHBkSEUwRHJNazNpNVhJWkU5TUFvR0NDcUdTTTQ5QkFNQ0EwY0FNRVFDSUduQXZyTTYKcGd5aTZxd0pkMkFaOW9SM2kzRVUrV05jSlJWYnE1UkhrV2ZiQWlCMGlZeXFMbk96b0dMbEloVXh6MFlkZmNCSwpocjJsVDdxQVJWVGF3cG9Ncmc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
],
"crypto_config": {
"identity_identifier_hash_function": "SHA256",
"signature_hash_family": "SHA2"
},
"fabric_node_ous": null,
"intermediate_certs": [],
"name": "org1",
"organizational_unit_identifiers": [],
"revocation_list": [],
"root_certs": [
"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNVRENDQWZlZ0F3SUJBZ0lRRXVTWC8vU2F4SWduZVdHMlY4WGUxREFLQmdncWhrak9QUVFEQWpCek1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVpNQmNHQTFVRUNoTVFiM0puTVM1bGVHRnRjR3hsTG1OdmJURWNNQm9HQTFVRUF4TVRZMkV1CmIzSm5NUzVsZUdGdGNHeGxMbU52YlRBZUZ3MHlNREF5TURNd09ERXpNREJhRncwek1EQXhNekV3T0RFek1EQmEKTUhNeEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BEWVd4cFptOXlibWxoTVJZd0ZBWURWUVFIRXcxVApZVzRnUm5KaGJtTnBjMk52TVJrd0Z3WURWUVFLRXhCdmNtY3hMbVY0WVcxd2JHVXVZMjl0TVJ3d0dnWURWUVFECkV4TmpZUzV2Y21jeExtVjRZVzF3YkdVdVkyOXRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUUKT2RCc3doWUNRZVpsRGkwRjFpZ0hCUHR5MFg4N2NNc1dXZDVxRC9QS2FMUkVoYUR3SGpsQWY4K0p1YmJ5b2NubQpHMDg4UjEzYVgvME85QS83eUhXbzVhTnRNR3N3RGdZRFZSMFBBUUgvQkFRREFnR21NQjBHQTFVZEpRUVdNQlFHCkNDc0dBUVVGQndNQ0JnZ3JCZ0VGQlFjREFUQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01Da0dBMVVkRGdRaUJDQXgKdXNNQms0Wjl1UWx1TjlFYjBLYkJtRUZpNlhSeE5BNnpKTjR1VnlHUlBUQUtCZ2dxaGtqT1BRUURBZ05IQURCRQpBaUJLNDl1L3JjQ0pxd04zV3dEWlFTRTcreTlBNFhKSGs2bk1HYWRORG1ndEp3SWdmQTdQSk1wUk9ENmlKbmV2ClAzQkVOaXJCS1g4V0g4R0ZvbE16QmhTcjF0MD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
],
"signing_identity": null,
"tls_intermediate_certs": [],
"tls_root_certs": [
"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNWakNDQWYyZ0F3SUJBZ0lRUlBoZFdOU2dOYk1LMXA0T0JBV0VWREFLQmdncWhrak9QUVFEQWpCMk1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVpNQmNHQTFVRUNoTVFiM0puTVM1bGVHRnRjR3hsTG1OdmJURWZNQjBHQTFVRUF4TVdkR3h6ClkyRXViM0puTVM1bGVHRnRjR3hsTG1OdmJUQWVGdzB5TURBeU1ETXdPREV6TURCYUZ3MHpNREF4TXpFd09ERXoKTURCYU1IWXhDekFKQmdOVkJBWVRBbFZUTVJNd0VRWURWUVFJRXdwRFlXeHBabTl5Ym1saE1SWXdGQVlEVlFRSApFdzFUWVc0Z1JuSmhibU5wYzJOdk1Sa3dGd1lEVlFRS0V4QnZjbWN4TG1WNFlXMXdiR1V1WTI5dE1SOHdIUVlEClZRUURFeFowYkhOallTNXZjbWN4TG1WNFlXMXdiR1V1WTI5dE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMEQKQVFjRFFnQUVkUjFlemV5RnFpQ2ZRVEdGRk4yM3ZPR2ZIdklzcDNvOXpIZUw4L2hpUFpkOGU3cklTbUlBYkJ6Vwo0NHZFQUNJMDVNWU8ycktpMmFBNnh5L3I0QzJnaGFOdE1Hc3dEZ1lEVlIwUEFRSC9CQVFEQWdHbU1CMEdBMVVkCkpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUZCUWNEQVRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUNrR0ExVWQKRGdRaUJDQm1ES1hDUTFIekUvd1lieGFKK1ZLdUphbDNOeVErNXdBRUNqQktEaVhWRFRBS0JnZ3Foa2pPUFFRRApBZ05IQURCRUFpQnBzVGRQTkJ4UzZTNTNnYThXTDhmVHp1M25jU0xYREFCS2RDdWdCTUJpSndJZ09lUk5ZVjNqCjJNYm9sNWVPU21FN3E5T3B2a0NLUlNXWEZpMWNDOEhxYks0PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
]
},
"type": 0
}
configtxlator output for channel_id: org1
[1;32m
OK: <org1> is in the channel <test1234567890>.[m[m[m
[34m2020-02-03 08:34:39.995 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:34:39.997 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 08:34:39.998 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 08:34:39.998 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"config": {
"admins": [
"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNHVENDQWNDZ0F3SUJBZ0lSQVBvMW9Gc25ZZ2VubnRvSW8zTUFhWGN3Q2dZSUtvWkl6ajBFQXdJd2N6RUwKTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY1REVk5oYmlCRwpjbUZ1WTJselkyOHhHVEFYQmdOVkJBb1RFRzl5WnpFdVpYaGhiWEJzWlM1amIyMHhIREFhQmdOVkJBTVRFMk5oCkxtOXlaekV1WlhoaGJYQnNaUzVqYjIwd0hoY05NakF3TWpBek1EZ3hNekF3V2hjTk16QXdNVE14TURneE16QXcKV2pCYk1Rc3dDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTgpVMkZ1SUVaeVlXNWphWE5qYnpFZk1CMEdBMVVFQXd3V1FXUnRhVzVBYjNKbk1TNWxlR0Z0Y0d4bExtTnZiVEJaCk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQkpkRFFSSmxUUTE0cVg3c24wdm9vZzgrdVI1dVRiaU8KaHdPTHZvMitjd3IvWC9ESjFTM3ZkVmoyTTN2cTZLbk4reDFMUUJVOGdEYmFEQU1nZ1c1bmlnZWpUVEJMTUE0RwpBMVVkRHdFQi93UUVBd0lIZ0RBTUJnTlZIUk1CQWY4RUFqQUFNQ3NHQTFVZEl3UWtNQ0tBSURHNnd3R1RobjI1CkNXNDMwUnZRcHNHWVFXTHBkSEUwRHJNazNpNVhJWkU5TUFvR0NDcUdTTTQ5QkFNQ0EwY0FNRVFDSUduQXZyTTYKcGd5aTZxd0pkMkFaOW9SM2kzRVUrV05jSlJWYnE1UkhrV2ZiQWlCMGlZeXFMbk96b0dMbEloVXh6MFlkZmNCSwpocjJsVDdxQVJWVGF3cG9Ncmc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
],
"crypto_config": {
"identity_identifier_hash_function": "SHA256",
"signature_hash_family": "SHA2"
},
"fabric_node_ous": null,
"intermediate_certs": [],
"name": "org1",
"organizational_unit_identifiers": [],
"revocation_list": [],
"root_certs": [
"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNVRENDQWZlZ0F3SUJBZ0lRRXVTWC8vU2F4SWduZVdHMlY4WGUxREFLQmdncWhrak9QUVFEQWpCek1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVpNQmNHQTFVRUNoTVFiM0puTVM1bGVHRnRjR3hsTG1OdmJURWNNQm9HQTFVRUF4TVRZMkV1CmIzSm5NUzVsZUdGdGNHeGxMbU52YlRBZUZ3MHlNREF5TURNd09ERXpNREJhRncwek1EQXhNekV3T0RFek1EQmEKTUhNeEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BEWVd4cFptOXlibWxoTVJZd0ZBWURWUVFIRXcxVApZVzRnUm5KaGJtTnBjMk52TVJrd0Z3WURWUVFLRXhCdmNtY3hMbVY0WVcxd2JHVXVZMjl0TVJ3d0dnWURWUVFECkV4TmpZUzV2Y21jeExtVjRZVzF3YkdVdVkyOXRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUUKT2RCc3doWUNRZVpsRGkwRjFpZ0hCUHR5MFg4N2NNc1dXZDVxRC9QS2FMUkVoYUR3SGpsQWY4K0p1YmJ5b2NubQpHMDg4UjEzYVgvME85QS83eUhXbzVhTnRNR3N3RGdZRFZSMFBBUUgvQkFRREFnR21NQjBHQTFVZEpRUVdNQlFHCkNDc0dBUVVGQndNQ0JnZ3JCZ0VGQlFjREFUQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01Da0dBMVVkRGdRaUJDQXgKdXNNQms0Wjl1UWx1TjlFYjBLYkJtRUZpNlhSeE5BNnpKTjR1VnlHUlBUQUtCZ2dxaGtqT1BRUURBZ05IQURCRQpBaUJLNDl1L3JjQ0pxd04zV3dEWlFTRTcreTlBNFhKSGs2bk1HYWRORG1ndEp3SWdmQTdQSk1wUk9ENmlKbmV2ClAzQkVOaXJCS1g4V0g4R0ZvbE16QmhTcjF0MD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
],
"signing_identity": null,
"tls_intermediate_certs": [],
"tls_root_certs": [
"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNWakNDQWYyZ0F3SUJBZ0lRUlBoZFdOU2dOYk1LMXA0T0JBV0VWREFLQmdncWhrak9QUVFEQWpCMk1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVpNQmNHQTFVRUNoTVFiM0puTVM1bGVHRnRjR3hsTG1OdmJURWZNQjBHQTFVRUF4TVdkR3h6ClkyRXViM0puTVM1bGVHRnRjR3hsTG1OdmJUQWVGdzB5TURBeU1ETXdPREV6TURCYUZ3MHpNREF4TXpFd09ERXoKTURCYU1IWXhDekFKQmdOVkJBWVRBbFZUTVJNd0VRWURWUVFJRXdwRFlXeHBabTl5Ym1saE1SWXdGQVlEVlFRSApFdzFUWVc0Z1JuSmhibU5wYzJOdk1Sa3dGd1lEVlFRS0V4QnZjbWN4TG1WNFlXMXdiR1V1WTI5dE1SOHdIUVlEClZRUURFeFowYkhOallTNXZjbWN4TG1WNFlXMXdiR1V1WTI5dE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMEQKQVFjRFFnQUVkUjFlemV5RnFpQ2ZRVEdGRk4yM3ZPR2ZIdklzcDNvOXpIZUw4L2hpUFpkOGU3cklTbUlBYkJ6Vwo0NHZFQUNJMDVNWU8ycktpMmFBNnh5L3I0QzJnaGFOdE1Hc3dEZ1lEVlIwUEFRSC9CQVFEQWdHbU1CMEdBMVVkCkpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUZCUWNEQVRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUNrR0ExVWQKRGdRaUJDQm1ES1hDUTFIekUvd1lieGFKK1ZLdUphbDNOeVErNXdBRUNqQktEaVhWRFRBS0JnZ3Foa2pPUFFRRApBZ05IQURCRUFpQnBzVGRQTkJ4UzZTNTNnYThXTDhmVHp1M25jU0xYREFCS2RDdWdCTUJpSndJZ09lUk5ZVjNqCjJNYm9sNWVPU21FN3E5T3B2a0NLUlNXWEZpMWNDOEhxYks0PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
]
},
"type": 0
}
configtxlator output for channel_id: org1
[1;32m
OK: <org1> is in the channel <test1234567890>.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 08:35:10.268 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:35:10.271 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 08:35:10.272 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 08:35:10.272 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
configtxlator output for .channel_id: test1234567890
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 08:36:25.374 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:36:25.375 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 08:36:25.376 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 08:36:25.376 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
configtxlator output for .channel_id: test1234567890
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 08:37:19.223 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:37:19.225 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 08:37:19.226 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 08:37:19.226 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
configtxlator output for .channel_id: test1234567890
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 08:38:09.197 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:38:09.199 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 08:38:09.200 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 08:38:09.200 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
configtxlator output for .channel_id: test1234567890
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 08:38:33.901 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:38:33.903 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 08:38:33.904 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 08:38:33.904 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
configtxlator output for .channel_id: test1234567890
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 08:39:21.747 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:39:21.748 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 08:39:21.749 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 08:39:21.749 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
configtxlator output for .channel_id: test1234567890
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 08:39:37.075 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:39:37.077 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 08:39:37.077 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 08:39:37.077 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
configtxlator output for .channel_id: test1234567890
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 08:40:28.237 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:40:28.239 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 08:40:28.240 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 08:40:28.240 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
configtxlator output for .channel_id: test1234567890
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 08:41:08.869 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:41:08.870 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 08:41:08.871 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 08:41:08.871 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
configtxlator output for .channel_id: test1234567890
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 08:41:51.842 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:41:51.843 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 08:41:51.844 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 08:41:51.844 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
configtxlator output for .channel_id: test1234567890
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 08:42:09.809 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:42:09.810 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 08:42:09.811 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 08:42:09.811 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
configtxlator output for .channel_id: test1234567890
[34m2020-02-03 08:42:27.879 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:42:27.880 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 08:42:27.881 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 08:42:27.881 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"config": {
"admins": [
"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNHVENDQWNDZ0F3SUJBZ0lSQVBvMW9Gc25ZZ2VubnRvSW8zTUFhWGN3Q2dZSUtvWkl6ajBFQXdJd2N6RUwKTUFrR0ExVUVCaE1DVlZNeEV6QVJCZ05WQkFnVENrTmhiR2xtYjNKdWFXRXhGakFVQmdOVkJBY1REVk5oYmlCRwpjbUZ1WTJselkyOHhHVEFYQmdOVkJBb1RFRzl5WnpFdVpYaGhiWEJzWlM1amIyMHhIREFhQmdOVkJBTVRFMk5oCkxtOXlaekV1WlhoaGJYQnNaUzVqYjIwd0hoY05NakF3TWpBek1EZ3hNekF3V2hjTk16QXdNVE14TURneE16QXcKV2pCYk1Rc3dDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTgpVMkZ1SUVaeVlXNWphWE5qYnpFZk1CMEdBMVVFQXd3V1FXUnRhVzVBYjNKbk1TNWxlR0Z0Y0d4bExtTnZiVEJaCk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQkpkRFFSSmxUUTE0cVg3c24wdm9vZzgrdVI1dVRiaU8KaHdPTHZvMitjd3IvWC9ESjFTM3ZkVmoyTTN2cTZLbk4reDFMUUJVOGdEYmFEQU1nZ1c1bmlnZWpUVEJMTUE0RwpBMVVkRHdFQi93UUVBd0lIZ0RBTUJnTlZIUk1CQWY4RUFqQUFNQ3NHQTFVZEl3UWtNQ0tBSURHNnd3R1RobjI1CkNXNDMwUnZRcHNHWVFXTHBkSEUwRHJNazNpNVhJWkU5TUFvR0NDcUdTTTQ5QkFNQ0EwY0FNRVFDSUduQXZyTTYKcGd5aTZxd0pkMkFaOW9SM2kzRVUrV05jSlJWYnE1UkhrV2ZiQWlCMGlZeXFMbk96b0dMbEloVXh6MFlkZmNCSwpocjJsVDdxQVJWVGF3cG9Ncmc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
],
"crypto_config": {
"identity_identifier_hash_function": "SHA256",
"signature_hash_family": "SHA2"
},
"fabric_node_ous": null,
"intermediate_certs": [],
"name": "org1",
"organizational_unit_identifiers": [],
"revocation_list": [],
"root_certs": [
"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNVRENDQWZlZ0F3SUJBZ0lRRXVTWC8vU2F4SWduZVdHMlY4WGUxREFLQmdncWhrak9QUVFEQWpCek1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVpNQmNHQTFVRUNoTVFiM0puTVM1bGVHRnRjR3hsTG1OdmJURWNNQm9HQTFVRUF4TVRZMkV1CmIzSm5NUzVsZUdGdGNHeGxMbU52YlRBZUZ3MHlNREF5TURNd09ERXpNREJhRncwek1EQXhNekV3T0RFek1EQmEKTUhNeEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BEWVd4cFptOXlibWxoTVJZd0ZBWURWUVFIRXcxVApZVzRnUm5KaGJtTnBjMk52TVJrd0Z3WURWUVFLRXhCdmNtY3hMbVY0WVcxd2JHVXVZMjl0TVJ3d0dnWURWUVFECkV4TmpZUzV2Y21jeExtVjRZVzF3YkdVdVkyOXRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUUKT2RCc3doWUNRZVpsRGkwRjFpZ0hCUHR5MFg4N2NNc1dXZDVxRC9QS2FMUkVoYUR3SGpsQWY4K0p1YmJ5b2NubQpHMDg4UjEzYVgvME85QS83eUhXbzVhTnRNR3N3RGdZRFZSMFBBUUgvQkFRREFnR21NQjBHQTFVZEpRUVdNQlFHCkNDc0dBUVVGQndNQ0JnZ3JCZ0VGQlFjREFUQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01Da0dBMVVkRGdRaUJDQXgKdXNNQms0Wjl1UWx1TjlFYjBLYkJtRUZpNlhSeE5BNnpKTjR1VnlHUlBUQUtCZ2dxaGtqT1BRUURBZ05IQURCRQpBaUJLNDl1L3JjQ0pxd04zV3dEWlFTRTcreTlBNFhKSGs2bk1HYWRORG1ndEp3SWdmQTdQSk1wUk9ENmlKbmV2ClAzQkVOaXJCS1g4V0g4R0ZvbE16QmhTcjF0MD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
],
"signing_identity": null,
"tls_intermediate_certs": [],
"tls_root_certs": [
"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNWakNDQWYyZ0F3SUJBZ0lRUlBoZFdOU2dOYk1LMXA0T0JBV0VWREFLQmdncWhrak9QUVFEQWpCMk1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVpNQmNHQTFVRUNoTVFiM0puTVM1bGVHRnRjR3hsTG1OdmJURWZNQjBHQTFVRUF4TVdkR3h6ClkyRXViM0puTVM1bGVHRnRjR3hsTG1OdmJUQWVGdzB5TURBeU1ETXdPREV6TURCYUZ3MHpNREF4TXpFd09ERXoKTURCYU1IWXhDekFKQmdOVkJBWVRBbFZUTVJNd0VRWURWUVFJRXdwRFlXeHBabTl5Ym1saE1SWXdGQVlEVlFRSApFdzFUWVc0Z1JuSmhibU5wYzJOdk1Sa3dGd1lEVlFRS0V4QnZjbWN4TG1WNFlXMXdiR1V1WTI5dE1SOHdIUVlEClZRUURFeFowYkhOallTNXZjbWN4TG1WNFlXMXdiR1V1WTI5dE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMEQKQVFjRFFnQUVkUjFlemV5RnFpQ2ZRVEdGRk4yM3ZPR2ZIdklzcDNvOXpIZUw4L2hpUFpkOGU3cklTbUlBYkJ6Vwo0NHZFQUNJMDVNWU8ycktpMmFBNnh5L3I0QzJnaGFOdE1Hc3dEZ1lEVlIwUEFRSC9CQVFEQWdHbU1CMEdBMVVkCkpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUZCUWNEQVRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUNrR0ExVWQKRGdRaUJDQm1ES1hDUTFIekUvd1lieGFKK1ZLdUphbDNOeVErNXdBRUNqQktEaVhWRFRBS0JnZ3Foa2pPUFFRRApBZ05IQURCRUFpQnBzVGRQTkJ4UzZTNTNnYThXTDhmVHp1M25jU0xYREFCS2RDdWdCTUJpSndJZ09lUk5ZVjNqCjJNYm9sNWVPU21FN3E5T3B2a0NLUlNXWEZpMWNDOEhxYks0PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
]
},
"type": 0
}
configtxlator output for channel_id: org1
[1;32m
OK: <org1> is in the channel <test1234567890>.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 08:42:35.431 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:42:35.433 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 08:42:35.434 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 08:42:35.434 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
configtxlator output for .channel_id: test1234567890
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 08:43:16.687 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:43:16.689 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 08:43:16.690 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 08:43:16.690 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
configtxlator output for .channel_id: test1234567890
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 08:43:48.473 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:43:48.475 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 08:43:48.476 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 08:43:48.476 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
configtxlator output for .channel_id: test1234567890
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 08:45:04.383 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:45:04.385 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 08:45:04.386 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 08:45:04.386 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
configtxlator output for .channel_id: test1234567890
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 08:45:17.926 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 08:45:17.929 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 08:45:17.930 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 08:45:17.930 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
configtxlator output for .channel_id: test1234567890
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
./verify/../libs.sh: line 322: test1234567890: command not found
configtxlator output for .channel_id: 
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
configtxlator output for .channel_id: test1234567890
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test12345678901> channel exists in org1.example.com...[m[m[m
configtxlator output for .channel_id: null
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
configtxlator output for .channel_id: test1234567890
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
configtxlator output for .channel_id: test1234567890
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
configtxlator output for .channel_id: test1234567890
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
configtxlator output for .channel_id: test1234567890
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
configtxlator output for .channel_id: test1234567890
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
configtxlator output for .channel_id: test1234567890
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
configtxlator output for .channel_id: test1234567890
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
configtxlator output for .channel_id: test1234567890
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
configtxlator output for .channel_id: test1234567890
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
configtxlator output for .channel_id: test1234567890
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
configtxlator output for .channel_id: test1234567890
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
configtxlator output for .channel_id: test1234567890
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
configtxlator output for .channel_id: test1234567890
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
configtxlator output for .channel_id: test1234567890
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:10:04.997 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:10:04.998 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:10:04.999 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:10:04.999 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
configtxlator output for .channel_id: test1234567890
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:10:15.184 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:10:15.186 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:10:15.186 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:10:15.186 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
configtxlator output for .channel_id: test1234567890
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
configtxlator output for .channel_id: test1234567890
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:38:25.496 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:38:25.499 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:38:25.500 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:38:25.500 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:38:41.434 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:38:41.439 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:38:41.440 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:38:41.440 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:38:46.045 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:38:46.047 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:38:46.048 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:38:46.048 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:39:06.279 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:39:06.281 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:39:06.282 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:39:06.282 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:39:21.916 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:39:21.918 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:39:21.919 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:39:21.919 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:39:48.858 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:39:48.861 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:39:48.862 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:39:48.862 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:39:55.942 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:39:55.944 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:39:55.945 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:39:55.945 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:41:02.577 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:41:02.579 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:41:02.580 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:41:02.580 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
test1234567890
parse error: Invalid literal at line 2, column 0
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:41:12.995 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:41:12.997 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:41:12.998 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:41:12.998 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
test1234567890
parse error: Invalid literal at line 2, column 0
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:41:30.227 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:41:30.229 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:41:30.230 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:41:30.230 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
test1234567890
parse error: Invalid literal at line 2, column 0
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:41:39.672 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:41:39.674 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:41:39.674 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:41:39.674 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:41:51.731 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:41:51.734 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:41:51.736 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:41:51.736 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:42:03.524 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:42:03.526 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:42:03.527 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:42:03.527 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:42:15.752 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:42:15.754 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:42:15.755 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:42:15.755 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:42:24.056 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:42:24.058 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:42:24.058 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:42:24.058 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:43:33.540 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:43:33.543 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:43:33.544 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:43:33.544 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
test1234567890
parse error: Invalid literal at line 2, column 0
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:43:41.415 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:43:41.417 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:43:41.418 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:43:41.418 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
test1234567890
parse error: Invalid literal at line 2, column 0
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:43:51.520 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:43:51.522 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:43:51.523 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:43:51.523 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
test1234567890
parse error: Invalid literal at line 2, column 0
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:44:11.385 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:44:11.387 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:44:11.389 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:44:11.389 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:46:55.482 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:46:55.485 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:46:55.486 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:46:55.486 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
"test1234567890"
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:47:30.353 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:47:30.354 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:47:30.355 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:47:30.356 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
"test1234567890"
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:47:48.921 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:47:48.922 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:47:48.923 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:47:48.923 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
{
"channel_id": "test1234567890",
"epoch": "0",
"extension": null,
"timestamp": "2020-02-03T08:25:08Z",
"tls_cert_hash": null,
"tx_id": "",
"type": 1,
"version": 0
}
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
[34m2020-02-03 09:48:25.320 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:48:25.321 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:48:25.322 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:48:25.322 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
"test1234567890"
[1;32mOK: The channel <test1234567890> exists and visible to org1[m[m[m
[1;36mVerifing if the <test1234567890> channel exists in org1.example.com...[m[m[m
jq: error: syntax error, unexpected $end, expecting FORMAT or QQSTRING_START (Unix shell quoting issues?) at <top-level>, line 1:
.data.data[0].payload.header.channel_header.
jq: 1 compile error
jq: error: channel_id/0 is not defined at <top-level>, line 1:
channel_id
jq: 1 compile error
[34m2020-02-03 09:48:33.817 UTC [channelCmd] InitCmdFactory -> INFO 001[0m Endorser and orderer connections initialized
[34m2020-02-03 09:48:33.819 UTC [cli.common] readBlock -> INFO 002[0m Received block: 1
[34m2020-02-03 09:48:33.820 UTC [cli.common] readBlock -> INFO 003[0m Received block: 1
[34m2020-02-03 09:48:33.820 UTC [channelCmd] fetch -> INFO 004[0m Retrieving last config block: 1
[1;31mERROR! See ./fs_network_test.log for logs.[m[m[m
