#user  nginx;
worker_processes  auto;
worker_rlimit_nofile 128000;

error_log  {{ default "/var/log/nginx/error.log debug" .Values.nginx.logPath }};
pid        {{ default "/var/run/nginx.pid" .Values.nginx.pidPath }};


events {
    worker_connections  1024;
}

stream {

    log_format grpc_json escape=json '{"timestamp":"$time_iso8601",'
    '"client":"$remote_addr","http-status":$status,'
    '"upstream":"$upstream_addr"'
    ',"tx-bytes":$bytes_sent}';


    {{- define "peerOrgName" -}}
       {{- required "peerOrgName is required" (tpl $.Values.peerOrgName $) -}}
    {{- end }}

    map $ssl_preread_server_name $upstream {
        hostnames;
        {{ range $ordererName := split "," .Values.ordererNames -}}
            {{ $ordererName }}.{{ required "Edge domain is required" $.Values.edge.domain }} {{ default (printf "%s.%s" $ordererName $.Values.edge.domain) $.Values.edge.ip }}:{{ required "Edge orderer port is required" $.Values.edge.ordererPort }};
        {{ end }}

        {{ include "peerOrgName" . }}.{{ .Values.edge.domain }} {{ default (printf "%s.%s" (include "peerOrgName" .) $.Values.edge.domain) $.Values.edge.ip }}:{{ required "Edge peer port is required" .Values.edge.peerPort }};

        {{ range $externalOrg := required "externalHosts is required" .Values.externalHosts -}}
            {{ if $externalOrg.peer }}
                {{- $externalOrg.peer }} {{ required "externalOrg Ip is required" $externalOrg.ip }}:{{ $.Values.externalOrgs.peerPort -}};
            {{ end }}
            {{- if $externalOrg.orderer -}}
                {{- $externalOrg.orderer }} {{ $externalOrg.ip }}:{{ $.Values.externalOrgs.ordererPort }};
            {{- end }}
        {{- end }}
    }

    server {
        listen {{ required "peerPort is required" .Values.peerPort }};
        {{- if ne (toString .Values.peerPort) (toString .Values.ordererPort) }}
        listen {{ required "ordererPort is required" .Values.ordererPort }};
        {{ end }}
        {{- if ne (toString .Values.peerPort) (toString .Values.externalOrgs.peerPort) }}
        listen {{ .Values.externalOrgs.peerPort }};
        {{- end }}
        {{- if ne (toString .Values.externalOrgs.ordererPort) (toString .Values.ordererPort) }}
        listen {{ .Values.externalOrgs.ordererPort }};
        {{- end }}

        ssl_preread on;
        proxy_pass $upstream;
    }

}
