
Organizations:

    - &OrdererOrg
        Name: Orderer
        ID: orderer.${ORDERER_DOMAIN}
        MSPDir: ordererOrganizations/${ORDERER_DOMAIN}/msp

    - &firstOrg
        Name: ${ORG}
        ID: ${ORG}
        MSPDir: peerOrganizations/${ORG}.${DOMAIN}/msp
        AnchorPeers:
        # AnchorPeers defines the location of peers which can be used
        # for cross org gossip communication.  Note, this value is only
        # encoded in the genesis block in the Application section context
        - Host: peer0.${ORG}.${DOMAIN}
          Port: ${PEER0_PORT}

Capabilities:
  Global: &ChannelCapabilities
    V1_1: true
  Orderer: &OrdererCapabilities
    V1_1: true
  Application: &ApplicationCapabilities
    V1_2: true

Application: &ApplicationDefaults
  ACLs: &ACLsDefault
    # This section provides defaults for policies for various resources
    # in the system. These "resources" could be functions on system chaincodes
    # (e.g., "GetBlockByNumber" on the "qscc" system chaincode) or other resources
    # (e.g.,who can receive Block events). This section does NOT specify the resource's
    # definition or API, but just the ACL policy for it.
    #
    # User's can override these defaults with their own policy mapping by defining the
    # mapping under ACLs in their channel definition

    #---Lifecycle System Chaincode (lscc) function to policy mapping for access control---#

    # ACL policy for lscc's "getid" function
    lscc/ChaincodeExists: /Channel/Application/Readers

    # ACL policy for lscc's "getdepspec" function
    lscc/GetDeploymentSpec: /Channel/Application/Readers

    # ACL policy for lscc's "getccdata" function
    lscc/GetChaincodeData: /Channel/Application/Readers

    # ACL Policy for lscc's "getchaincodes" function
    lscc/GetInstantiatedChaincodes: /Channel/Application/Readers

    #---Query System Chaincode (qscc) function to policy mapping for access control---#

    # ACL policy for qscc's "GetChainInfo" function
    qscc/GetChainInfo: /Channel/Application/Readers

    # ACL policy for qscc's "GetBlockByNumber" function
    qscc/GetBlockByNumber: /Channel/Application/Readers

    # ACL policy for qscc's  "GetBlockByHash" function
    qscc/GetBlockByHash: /Channel/Application/Readers

    # ACL policy for qscc's "GetTransactionByID" function
    qscc/GetTransactionByID: /Channel/Application/Readers

    # ACL policy for qscc's "GetBlockByTxID" function
    qscc/GetBlockByTxID: /Channel/Application/Readers

    #---Configuration System Chaincode (cscc) function to policy mapping for access control---#

    # ACL policy for cscc's "GetConfigBlock" function
    cscc/GetConfigBlock: /Channel/Application/Readers

    # ACL policy for cscc's "GetConfigTree" function
    cscc/GetConfigTree: /Channel/Application/Readers

    # ACL policy for cscc's "SimulateConfigTreeUpdate" function
    cscc/SimulateConfigTreeUpdate: /Channel/Application/Readers

    #---Miscellanesous peer function to policy mapping for access control---#

    # ACL policy for invoking chaincodes on peer
    peer/Propose: /Channel/Application/Writers

    # ACL policy for chaincode to chaincode invocation
    peer/ChaincodeToChaincode: /Channel/Application/Readers

    #---Events resource to policy mapping for access control###---#

    # ACL policy for sending block events
    event/Block: /Channel/Application/Readers

    # ACL policy for sending filtered block events
    event/FilteredBlock: /Channel/Application/Readers

  # Organizations lists the orgs participating on the application side of the
  # network.
  Organizations:

  # Policies defines the set of policies at this level of the config tree
  # For Application policies, their canonical path is
  #   /Channel/Application/<PolicyName>
  Policies: &ApplicationDefaultPolicies
    Readers:
      Type: ImplicitMeta
      Rule: "ANY Readers"
    Writers:
      Type: ImplicitMeta
      Rule: "ANY Writers"
    Admins:
      Type: ImplicitMeta
      Rule: "MAJORITY Admins"

  # Capabilities describes the application level capabilities, see the
  # dedicated Capabilities section elsewhere in this file for a full
  # description
  Capabilities:
    <<: *ApplicationCapabilities


Orderer: &OrdererDefaults

    # Batch Timeout: The amount of time to wait before creating a batch
    BatchTimeout: ${ORDERER_BATCH_TIMEOUT}s

    # Batch Size: Controls the number of messages batched into a block
    BatchSize:

        # Max Message Count: The maximum number of messages to permit in a batch
        MaxMessageCount: 10

        # Absolute Max Bytes: The absolute maximum number of bytes allowed for
        # the serialized messages in a batch.
        AbsoluteMaxBytes: 98 MB

        # Preferred Max Bytes: The preferred maximum number of bytes allowed for
        # the serialized messages in a batch. A message larger than the preferred
        # max bytes will result in a batch larger than preferred max bytes.
        PreferredMaxBytes: 512 KB

    Kafka:
        # Brokers: A list of Kafka brokers to which the orderer connects
        # NOTE: Use IP:port notation
        Brokers:
            - 127.0.0.1:9092

    # Organizations is the list of orgs which are defined as participants on
    # the orderer side of the network
    Organizations:

Profiles:

    SoloOrdererGenesis:
        Capabilities:
            <<: *ChannelCapabilities
        Orderer:
            <<: *OrdererDefaults
            OrdererType: solo
            Addresses:
              - orderer.${DOMAIN}:${ORDERER_GENERAL_LISTENPORT}
            Organizations:
                - *OrdererOrg
            Capabilities:
                <<: *OrdererCapabilities

        Consortiums:
            SampleConsortium:
                Organizations:
#                    - *OrdererOrg

    RaftOrdererGenesis:
      Capabilities:
        <<: *ChannelCapabilities
      Orderer:
        <<: *OrdererDefaults
        OrdererType: etcdraft
        Addresses: [${ORDERER_NAME}.${ORDERER_DOMAIN}:${ORDERER_GENERAL_LISTENPORT}]
        EtcdRaft:
          # The set of Raft replicas for this network. For the etcd/raft-based
          # implementation, we expect every replica to also be an OSN. Therefore,
          # a subset of the host:port items enumerated in this list should be
          # replicated under the Orderer.Addresses key above.
          Consenters:
            - Host: ${ORDERER_NAME}.${ORDERER_DOMAIN}
              Port: ${RAFT0_PORT}
              ClientTLSCert: ordererOrganizations/${ORDERER_DOMAIN}/orderers/${ORDERER_NAME}.${ORDERER_DOMAIN}/tls/server.crt
              ServerTLSCert: ordererOrganizations/${ORDERER_DOMAIN}/orderers/${ORDERER_NAME}.${ORDERER_DOMAIN}/tls/server.crt
        Organizations:
          - *OrdererOrg
        Capabilities:
          <<: *OrdererCapabilities
        Policies:
          Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
          Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
          Admins:
            Type: ImplicitMeta
            Rule: "ANY Admins"
          # BlockValidation specifies what signatures must be included in the block
          # from the orderer for the peer to validate it.
          BlockValidation:
            Type: ImplicitMeta
            Rule: "ANY Writers"


      Consortiums:
        SampleConsortium:
          Organizations:
#            - *OrdererOrg



    Raft3OrdererGenesis:
        Capabilities:
            <<: *ChannelCapabilities
        Orderer:
            <<: *OrdererDefaults
            OrdererType: etcdraft
            Addresses: [${ORDERER_NAME}.${ORDERER_DOMAIN}:${RAFT0_PORT}, ${ORDERER_NAME_PREFIX}1.${ORDERER_DOMAIN}:${RAFT1_PORT},${ORDERER_NAME_PREFIX}2.${ORDERER_DOMAIN}:${RAFT2_PORT}]
            EtcdRaft:
              # The set of Raft replicas for this network. For the etcd/raft-based
              # implementation, we expect every replica to also be an OSN. Therefore,
              # a subset of the host:port items enumerated in this list should be
              # replicated under the Orderer.Addresses key above.
              Consenters:
                - Host: ${ORDERER_NAME}.${ORDERER_DOMAIN}
                  Port: ${RAFT0_PORT}
                  ClientTLSCert: ordererOrganizations/${ORDERER_DOMAIN}/orderers/${ORDERER_NAME}.${ORDERER_DOMAIN}/tls/server.crt
                  ServerTLSCert: ordererOrganizations/${ORDERER_DOMAIN}/orderers/${ORDERER_NAME}.${ORDERER_DOMAIN}/tls/server.crt
                - Host: ${ORDERER_NAME_PREFIX}1.${ORDERER_DOMAIN}
                  Port: ${RAFT1_PORT}
                  ClientTLSCert: ordererOrganizations/${ORDERER_DOMAIN}/orderers/${ORDERER_NAME_PREFIX}1.${ORDERER_DOMAIN}/tls/server.crt
                  ServerTLSCert: ordererOrganizations/${ORDERER_DOMAIN}/orderers/${ORDERER_NAME_PREFIX}1.${ORDERER_DOMAIN}/tls/server.crt
                - Host: ${ORDERER_NAME_PREFIX}2.${ORDERER_DOMAIN}
                  Port: ${RAFT2_PORT}
                  ClientTLSCert: ordererOrganizations/${ORDERER_DOMAIN}/orderers/${ORDERER_NAME_PREFIX}2.${ORDERER_DOMAIN}/tls/server.crt
                  ServerTLSCert: ordererOrganizations/${ORDERER_DOMAIN}/orderers/${ORDERER_NAME_PREFIX}2.${ORDERER_DOMAIN}/tls/server.crt
            Organizations:
                - *OrdererOrg
            Capabilities:
                <<: *OrdererCapabilities
            Policies:
              Readers:
                Type: ImplicitMeta
                Rule: "ANY Readers"
              Writers:
                Type: ImplicitMeta
                Rule: "ANY Writers"
              Admins:
                Type: ImplicitMeta
                Rule: "ANY Admins"
              # BlockValidation specifies what signatures must be included in the block
              # from the orderer for the peer to validate it.
              BlockValidation:
                Type: ImplicitMeta
                Rule: "ANY Writers"

        Consortiums:
            SampleConsortium:
                Organizations:
#                    - *OrdererOrg


    CHANNEL:
        Orderer:
            Organizations:
            - *OrdererOrg
        Consortium: SampleConsortium
        Application:
            Organizations:
            - *firstOrg
            Capabilities:
                <<: *ApplicationCapabilities
            Policies:
              Readers:
                Type: ImplicitMeta
                Rule: "ANY Readers"
              Writers:
                  Type: ImplicitMeta
                  Rule: "ANY Writers"
              Admins:
#                Type: ImplicitMeta
#                Rule: "ANY Admins"
                Type: Signature
                Rule: "OutOf('1','${ORG}.admin')"
#              Admins:
#                  Type: ImplicitMeta
#                  Rule: "MAJORITY Admins"
